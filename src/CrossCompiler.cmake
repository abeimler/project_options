include_guard()

macro(enable_cross_compiler)
  include("${ProjectOptions_SRC_DIR}/Utilities.cmake")
  detect_architecture(_arch)

  if("${DEFAULT_TRIPLET}" STREQUAL "")
    detect_compiler()
  endif()
  set(_cc ${CMAKE_C_COMPILER})
  set(_cxx ${CMAKE_CXX_COMPILER})

  # detect compiler by triplet
  if("${DEFAULT_TRIPLET}" STREQUAL "x64-mingw-dynamic" OR "${DEFAULT_TRIPLET}" STREQUAL "x64-mingw-static")
    if("${_cc}" STREQUAL "")
      set(_cc "x86_64-w64-mingw32-gcc")
    endif()
    if("${_cxx}" STREQUAL "")
      set(_cxx "x86_64-w64-mingw32-g++")
    endif()
    set(TARGET_ARCHITECTURE "x64")
  elseif("${DEFAULT_TRIPLET}" STREQUAL "x86-mingw-dynamic" OR "${DEFAULT_TRIPLET}" STREQUAL "x86-mingw-static")
    if("${_cc}" STREQUAL "")
      set(_cc "i686-w64-mingw32-gcc")
    endif()
    if("${_cxx}" STREQUAL "")
      set(_cxx "i686-w64-mingw32-g++")
    endif()
    set(TARGET_ARCHITECTURE "x86")
  elseif("${DEFAULT_TRIPLET}" STREQUAL "wasm32-emscripten")
    set(_cc "emcc")
    set(_cxx "em++")
    set(TARGET_ARCHITECTURE "wasm32-emscripten")
  endif()

  if("${TARGET_ARCHITECTURE}" STREQUAL "")
    if("${_cc}" STREQUAL "")
      set(_cc $ENV{CC})
    endif()
    if("${_cxx}" STREQUAL "")
      set(_cxx $ENV{CXX})
    endif()
    if(_cc MATCHES "x86_64(-w64)?-mingw32-[gc]..?" OR _cxx MATCHES "x86_64(-w64)?-mingw32-[gc]..?")
      set(TARGET_ARCHITECTURE "x64")
    elseif(_cc MATCHES "i686(-w64)?-mingw32-[gc]..?" OR _cxx MATCHES "i686(-w64)?-mingw32-[gc]..?")
      set(TARGET_ARCHITECTURE "x86")
    elseif(_cc MATCHES "emcc" OR _cxx MATCHES "em\\+\\+")
      set(TARGET_ARCHITECTURE "wasm32-emscripten")
    else()
      # TODO: check for arm compiler
      set(TARGET_ARCHITECTURE ${_arch})
    endif()
  endif()

  if(NOT DEFINED HOST_TRIPLET)
    if(WIN32)
      set(HOST_TRIPLET "${_arch}-windows")
    elseif(APPLE)
      set(HOST_TRIPLET "${_arch}-osx")
    elseif(UNIX AND NOT APPLE)
      set(HOST_TRIPLET "${_arch}-linux")
    endif()
  endif()

  set(USE_CROSSCOMPILER_MINGW)
  set(USE_CROSSCOMPILER_EMSCRIPTEN)
  if(_cc MATCHES "(x86_64|i686)(-w64)?-mingw32-[gc]..?" OR _cxx MATCHES "(x86_64|i686)(-w64)?-mingw32-[gc]..?")
    set(MINGW TRUE)
    set(USE_CROSSCOMPILER_MINGW TRUE)
  elseif(_cc MATCHES "emcc" OR _cxx MATCHES "em\\+\\+")
    set(USE_CROSSCOMPILER_EMSCRIPTEN TRUE)
  endif()

  set(LIBRARY_LINKAGE)
  if(BUILD_SHARED_LIBS)
    set(LIBRARY_LINKAGE "dynamic")
    if("${TRIPLET}" STREQUAL "x64-mingw-static" OR "${TRIPLET}" STREQUAL "x86-mingw-static")
      message(WARNING "cross-compiler triplet is set to 'static' but BUILD_SHARED_LIBS is enabled")
    endif()
  else()
    if("${TRIPLET}" STREQUAL "x64-mingw-dynamic" OR "${TRIPLET}" STREQUAL "x86-mingw-dynamic")
      set(LIBRARY_LINKAGE "dynamic")
    elseif("${TRIPLET}" STREQUAL "x64-mingw-static" OR "${TRIPLET}" STREQUAL "x86-mingw-static")
      set(LIBRARY_LINKAGE "static")
    else()
      set(LIBRARY_LINKAGE "static")
    endif()
  endif()

  if(NOT DEFINED CROSS_ROOT)
    if(_cc MATCHES "x86_64(-w64)?-mingw32-[gc]..?" OR _cxx MATCHES "x86_64(-w64)?-mingw32-[gc]..?")
      set(CROSS_ROOT "/usr/x86_64-w64-mingw32")
    elseif(_cc MATCHES "i686(-w64)?-mingw32-[gc]..?" OR _cxx MATCHES "i686(-w64)?-mingw32-[gc]..?")
      set(CROSS_ROOT "/usr/i686-w64-mingw32")
    endif()
    # TODO: check if path is right, check for header files or something
  endif()

  if(USE_CROSSCOMPILER_EMSCRIPTEN)
    if(NOT
       "$ENV{EMSCRIPTEN}"
       STREQUAL
       "")
      set(EMSCRIPTEN_ROOT $ENV{EMSCRIPTEN})
    else()
      if(NOT DEFINED EMSCRIPTEN_ROOT)
        include(FetchContent)
        message(STATUS "fetch emscripten repo. ...")
        FetchContent_Declare(
          emscripten
          GIT_REPOSITORY https://github.com/emscripten-core/emscripten
          GIT_TAG main)
        if(NOT emscripten_POPULATED)
          FetchContent_Populate(emscripten)
          set(EMSCRIPTEN_ROOT "${emscripten_SOURCE_DIR}")
        endif()
      endif()
    endif()
    if(NOT
       "$ENV{EMSDK}"
       STREQUAL
       "")
      set(EMSCRIPTEN_PREFIX "$ENV{EMSDK}/upstream/emscripten")
      set(EMSCRIPTEN_ROOT_PATH "$ENV{EMSDK}/upstream/emscripten")
    endif()
    if(NOT DEFINED CMAKE_CROSSCOMPILING_EMULATOR)
      set(CMAKE_CROSSCOMPILING_EMULATOR "$ENV{EMSDK_NODE};--experimental-wasm-threads")
    endif()
  else()
    set(CMAKE_C_COMPILER ${_cc})
    set(CMAKE_CXX_COMPILER ${_cxx})
  endif()

  set(_toolchain_file)
  get_toolchain_file(_toolchain_file)
  set(CMAKE_TOOLCHAIN_FILE ${_toolchain_file})
  set(CROSSCOMPILING TRUE)

  message(STATUS "enable cross-compiling")
  #message(STATUS "use CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
  #message(STATUS "use CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
  if(USE_CROSSCOMPILER_MINGW)
    message(STATUS "use MINGW cross-compiling")
    message(STATUS "use ROOT_PATH: ${CROSS_ROOT}")
  elseif(USE_CROSSCOMPILER_EMSCRIPTEN)
    message(STATUS "use emscripten cross-compiling")
    message(STATUS "use emscripten root: ${EMSCRIPTEN_ROOT}")
    #message(STATUS "use emscripten root (path): ${EMSCRIPTEN_ROOT_PATH}")
    #message(STATUS "EMSCRIPTEN: $ENV{EMSCRIPTEN}")
    #message(STATUS "EMSDK_NODE: $ENV{EMSDK_NODE}")
    #message(STATUS "EMSDK: $ENV{EMSDK}")
    message(STATUS "use emscripten cross-compiler emulator: ${CMAKE_CROSSCOMPILING_EMULATOR}")
  endif()
  message(STATUS "Target Architecture: ${TARGET_ARCHITECTURE}")
  if(DEFAULT_TRIPLET)
    message(STATUS "Default Triplet: ${DEFAULT_TRIPLET}")
  endif()
  message(STATUS "Host Triplet: ${HOST_TRIPLET}")
  message(STATUS "Toolchain File: ${CMAKE_TOOLCHAIN_FILE}")
endmacro()

function(get_toolchain_file value)
  include("${ProjectOptions_SRC_DIR}/Utilities.cmake")
  detect_architecture(_arch)
  if(DEFINED TARGET_ARCHITECTURE)
    set(_arch ${TARGET_ARCHITECTURE})
  endif()
  if("${_arch}" MATCHES "x64")
    set(_arch "x86_64")
  elseif("${_arch}" MATCHES "x86")
    set(_arch "i686")
  endif()

  if(USE_CROSSCOMPILER_MINGW)
    set(${value}
        ${ProjectOptions_SRC_DIR}/toolchains/${_arch}-w64-mingw32.toolchain.cmake
        PARENT_SCOPE)
  elseif(USE_CROSSCOMPILER_EMSCRIPTEN)
    if(EMSCRIPTEN_ROOT)
      set(${value}
          ${EMSCRIPTEN_ROOT}/cmake/Modules/Platform/Emscripten.cmake
          PARENT_SCOPE)
    else()
      message(ERROR "EMSCRIPTEN_ROOT is not set, please define EMSCRIPTEN_ROOT (emscripten repo)")
    endif()
  endif()
endfunction()
